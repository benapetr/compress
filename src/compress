#!/usr/bin/env python

# BSD 2-Clause License

# Copyright (c) 2015-2017, Petr Bena <petr@bena.rocks>
# All rights reserved.

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:

# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# The views and conclusions contained in the software and documentation are those
# of the authors and should not be interpreted as representing official policies,
# either expressed or implied, of the FreeBSD Project.

import subprocess
import argparse
import os
import sys
import uuid

def get_rh():
    return "_compress__" + str(uuid.uuid4().hex)

def debug_log(text, verbosity = 1):
    if (args.verbose >= verbosity):
        print (text)
    return

def error_log(text):
    sys.stderr.write(text + "\n")
    sys.stderr.flush()
    return

def test_compress(path):
    result = subprocess.check_output(["lsattr", path]).strip()
    if (result == ''):
        raise Exception('lsattr returned nothing')
    result = result[:result.index(b' ')]
    for f in result:
        if (f == 'c'):
            return True
    return False

def set_compress(path):
    rc = subprocess.call(["chattr", "+c", path])
    return rc

def unset_compress(path):
    rc = subprocess.call(["chattr", "-c", path])
    return rc

def compress_file(filepath, decompress = False):
    # fixme this suck
    rc = None
    is_compressed = test_compress(filepath)
    if (not decompress and is_compressed):
        debug_log("Skipped: " + filepath + ": already compressed")
        return True
    if (decompress and not is_compressed):
        debug_log("Skipped: " + filepath + ": not compressed")
        return True
    if (not decompress):
        debug_log("Compressing " + filepath)
        rc = set_compress(filepath)
    else:
        debug_log("Decompressing " + filepath)
        rc = unset_compress(filepath)

    if (rc != 0):
        error_log("ERROR: unable to set compression flag of " + filepath + " error code: " + str(rc))
        return False

    # Now we changed the attribute of file, but that doesn't change its actual compression until you either defragment it (requires root) or copy it
    # So let's copy it somewhere and then back to original place
    n = filepath + get_rh()
    if (target_exists(n)):
        raise Exception(n + " already exists")
    rc = subprocess.call(["cp", "--preserve=mode,ownership,timestamps,xattr", filepath, n])
    if (rc != 0):
        error_log("Unable to copy " + filepath + " to " + n)
        sys.exit(80)
    os.remove(filepath)
    os.rename(n, filepath)
    return True

def compress_folder(path):
    status = "Compressing"
    if (args.decompress):
        status = "Decompressing"
    debug_log(status + " folder recursively: " + path)
    if (args.decompress):
        rc = unset_compress(path)
    else:
        rc = set_compress(path)
    if (rc != 0):
        error_log("ERROR: unable to set compression flag of " + path + " error code: " + str(rc))
        sys.exit(rc)
    for item in os.listdir(path):
        p = path + "/" + item
        if (os.path.islink(p)):
            debug_log("Skipped: " + p + " (symlink)")
        elif (os.path.isdir(p)):
            compress_folder(p)
        elif (os.path.isfile(p)):
            # now this is a btrfs hack we test if file is already compressed and if it's not, we will move it
            if (not args.decompress and test_compress(p)):
                debug_log("Skipped: " + p + ": already compressed")
                continue
            elif (args.decompress and not test_compress(p)):
                debug_log("Skipped: " + p + ": not compressed")
                continue
            debug_log(status + " " + p + " using cp trick")
            n = p + get_rh()
            # we first copy the file so that if we get killed, there is a low chance that original data get damaged
            if (target_exists(n)):
                raise Exception(n + " already exists")
            # preserve file flags
            rc = subprocess.call(["cp", "-p", p, n])
            if (rc != 0):
                error_log("Unable to copy " + p + " to " + n)
                sys.exit(80)
            os.remove(p)
            os.rename(n, p)
        else:
            debug_log("Ignoring unknown file type: " + p)
    return 0

def process_args():
    parser = argparse.ArgumentParser(description = 'Tool which recursively compress files in a folder using btrfs transparent compression')
    parser.add_argument('-r', '--recursive', action='store_true', help='Recursively change all items in given path')
    parser.add_argument('-v', '--verbose', action='count', help='Change the program verbosity, by default program prints nothing unless there is some error')
    parser.add_argument('-d', '--decompress', action='store_true', help='Will remove compression flag and uncompress all files')
    #parser.add_argument('-f', '--force', action='store_true')
    #parser.add_argument('-s', '--strict', action='store_true')
    parser.add_argument('-V', '--version', version='compress 1.0.0.0', action='version')
    parser.add_argument('target', nargs='+', type=str, help='File or folder that you want to compress')
    args = parser.parse_args()
    if (args.verbose is None):
        args.verbose = 0
    return args

def target_exists(target):
    if (os.path.isfile(target)):
        return True
    if (os.path.isdir(target)):
        return True
    return False

def recursive_scan():
    return 0

def process_target(target):
    if (not target_exists(target)):
        error_log("FATAL: " + target + " not found")
        sys.exit(1)

    if (not args.recursive and os.path.isdir(target)):
        error_log("ERROR: " + target + " is a directory. Use -r option if you want to recursively compress it")
        return False

    if (not args.recursive):
        return compress_file(target, args.decompress)

    if (os.path.isfile(target)):
        compress_file(target)
    else:
        compress_folder(target)
    return True

args = process_args()
for item in args.target:
    process_target(item)
sys.exit(0)
